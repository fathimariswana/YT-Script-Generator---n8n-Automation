{
  "name": "YT Script Generator",
  "nodes": [
    {
      "parameters": {
        "formTitle": "YTVodeo Script Idea Form",
        "formDescription": "This form is to give a YT Video script generation",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Your rough video idea",
              "fieldType": "textarea",
              "placeholder": "Please enter your rough video idea here!",
              "requiredField": true
            },
            {
              "fieldLabel": "Duration",
              "fieldType": "number",
              "placeholder": "Please enter duration of video planning eg: 5minute"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -980,
        -315
      ],
      "id": "298e1b3d-20b9-4fc9-ab23-8b00e5230fec",
      "name": "On form submission",
      "webhookId": "17592989-9084-4aea-833e-d4d9a8d0ae77"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=!$json.data?.Notes \n? \n`You are a YouTube content creator assistant.\n\nBased on the user's input of a rough video idea and preferred duration, generate a complete YouTube video script plan optimized for engagement, clarity, and SEO.\n\n---\n\n### User Inputs:\n- Rough Video Idea: {{ $json[\"Your rough video idea\"] }}\n- Target Duration: {{ $json.Duration }} minutes\n\n---\n\n### Output Format:\nRespond using **only** the following exact Markdown structure with numbered headings and bold labels (include colon at the end of each heading):\n\n1. **Video Title**:  \n2. **Video Description**:  \n3. **Thumbnail Text Idea**:  \n4. **Call-to-Action (CTA)**:  \n5. **Script Structure** (based on {{ $json.Duration }} minutes):  \n   - **Intro (0:00‚Äì0:30)**:  \n     - Hook  \n     - What the video is about  \n     - Why they should watch till the end  \n     - CTA #1  \n   - **Main Sections** (include timestamps):  \n     For each section:  \n     - Section Title  \n     - Hook/Question/Problem  \n     - What will be delivered  \n     - The actual delivery (content)  \n   - **Conclusion (Last 30 seconds)**:  \n     - Recap of key points  \n     - Final takeaways  \n     - CTA #2 (comment, share, subscribe, playlist)  \n6. **Suggested Hashtags**:  \n7. **Suggested Tags (for YouTube settings)**:  \n8. **SEO Keywords**:  \n9. **End Screen Suggestions**:  \n\n---\n\n### Guidelines:\n- Tone: Friendly, informative, and engaging  \n- Audience: Beginners to intermediate  \n- Use clear, conversational language  \n- Use storytelling when possible  \n\n---\n\nüõë Important:\n- ‚úÖ Start output **immediately** with: \\`1. **Video Title**:\\`  \n- ‚ùå Do **not** include any explanations or formatting errors  \n- ‚ùå Do **not** escape characters or wrap in JSON  \n- ‚úÖ Output should be raw Markdown`\n: \n`You are a YouTube content creator assistant.\n\nYou are given:\n- An original script: {{$json.output}}\n- Rough Video Idea: {{ $('On form submission').item.json['Your rough video idea'] }}\n- Target Duration: {{ $('On form submission').item.json.Duration }} minutes\n- Notes: {{ $json.data?.Notes }}\n\nYour task is to **refine and enhance** the existing script to improve:\n- Engagement and storytelling\n- SEO and clarity\n- Hook, CTA, pacing, and overall flow\n\n---\n\n### Output Format:\nRespond using only the following exact Markdown structure with heading numbers and bold labels (include colon at the end of each):\n\n1. **Video Title**:  \n2. **Video Description**:  \n3. **Thumbnail Text Idea**:  \n4. **Call-to-Action (CTA)**:  \n5. **Script Structure**:  \n6. **Suggested Hashtags**:  \n7. **Suggested Tags**:  \n8. **SEO Keywords**:  \n9. **End Screen Suggestions**:  \n\n---\n\nüõë Important:\n- ‚úÖ Start output immediately with: \\`1. **Video Title**:\\`  \n- ‚ùå Do NOT include extra commentary, metadata, or explanations  \n- ‚úÖ Ensure clean, raw Markdown output with correct indentation and bolding\n`\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -540,
        -440
      ],
      "id": "4f6fe382-75b5-4ddb-bda1-438a81fc341f",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -460,
        -220
      ],
      "id": "e884ec33-0268-46be-8ec3-851680b79f0c",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "nAqZdfZRU7IIYWAY",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "sendTo": "studyfathima92@gmail.com",
        "subject": "Review YouTube Script Generated by AI Agent",
        "message": "=Hi Team,\n\nHope you're doing well.\n\nA new YouTube video script has been generated based on the latest idea submitted through the automation workflow. Please take a moment to review the script and suggest any improvements before it moves to the next stage of approval and publishing.\n\n{{ $json.output }}\n\nKindly provide your feedback by **EOD today**, so we can proceed with thumbnail design, voiceover, and scheduling.\n\nBest regards,  \nAutomation Team  \n",
        "responseType": "customForm",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Respond",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Approve"
                  },
                  {
                    "option": "Decline"
                  }
                ]
              },
              "requiredField": true
            },
            {
              "fieldLabel": "Notes",
              "placeholder": "Add notes here (required if declined)"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        40,
        -340
      ],
      "id": "5667140c-ea49-4bec-b014-8c1c80a14afb",
      "name": "Send a message",
      "webhookId": "70637dc6-cda9-4fa4-8aca-95cade451aa7",
      "credentials": {
        "gmailOAuth2": {
          "id": "s3jYjfGFBzr9JmuP",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "17f59f32-2906-41f1-9c22-a660f2c7a93c",
              "leftValue": "={{ $json.data.Respond }}",
              "rightValue": "Approve",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        480,
        -115
      ],
      "id": "bc43d3b7-ab26-4faf-970f-69c9fb6fc6cf",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1yWPShtNa0BZaS1qNjJQn2LZn9gr7TWzfKP_wasbRkXc",
          "mode": "list",
          "cachedResultName": "YT Scripts AI Agent",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1yWPShtNa0BZaS1qNjJQn2LZn9gr7TWzfKP_wasbRkXc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1yWPShtNa0BZaS1qNjJQn2LZn9gr7TWzfKP_wasbRkXc/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Video Title": "={{ $json['Video Title'] }}",
            "Video Description": "={{ $json['Video Description'] }}",
            "Thumbnail Text Idea": "={{ $json['Thumbnail Text Idea'] }}",
            "Call-to-Action (CTA)": "={{ $json['Call-to-Action (CTA)'] }}",
            "Script Structure": "={{ $json['Script Structure'] }}",
            "Suggested Hashtags": "={{ $json['Suggested Hashtags'] }}",
            "Suggested Tags (for YouTube settings)": "={{ $json['Suggested Tags'] }}",
            "SEO Keywords": "={{ $json['SEO Keywords'] }}",
            "End Screen Suggestions": "={{ $json['End Screen Suggestions'] }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Video Title",
              "displayName": "Video Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Video Description",
              "displayName": "Video Description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Thumbnail Text Idea",
              "displayName": "Thumbnail Text Idea",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Call-to-Action (CTA)",
              "displayName": "Call-to-Action (CTA)",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Script Structure",
              "displayName": "Script Structure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Suggested Hashtags",
              "displayName": "Suggested Hashtags",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Suggested Tags (for YouTube settings)",
              "displayName": "Suggested Tags (for YouTube settings)",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "SEO Keywords",
              "displayName": "SEO Keywords",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "End Screen Suggestions",
              "displayName": "End Screen Suggestions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1140,
        -215
      ],
      "id": "d01051b9-6a10-4065-8104-8549bd664564",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "gYUDGiIUS9AQepCH",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -760,
        -315
      ],
      "id": "97e0ea60-56f1-4025-b11d-216d8bb62f18",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "const text = $('AI Agent').first().json.output || \"\";\n\n// Master list of all field labels and variations\nconst headingMap = {\n  \"Video Title\": [\"video title\", \"title\"],\n  \"Video Description\": [\"video description\", \"description\"],\n  \"Thumbnail Text Idea\": [\"thumbnail text idea\", \"thumbnail idea\", \"thumbnail\"],\n  \"Call-to-Action (CTA)\": [\"call-to-action (cta)\", \"call-to-action\", \"cta\"],\n  \"Script Structure\": [\"script structure\", \"script\", \"structure\"],\n  \"Suggested Hashtags\": [\"suggested hashtags\", \"hashtags\"],\n  \"Suggested Tags\": [\"suggested tags\", \"tags\"],\n  \"SEO Keywords\": [\"seo keywords\", \"keywords\", \"seo\"],\n  \"End Screen Suggestions\": [\"end screen suggestions\", \"end screen\", \"end card\"]\n};\n\n// Normalize heading text\nfunction normalize(str) {\n  return str\n    .toLowerCase()\n    .replace(/[*#>\\-_:Ôºö0-9().!]+/g, '')\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\n\n// Extract content based on heading using regex\nfunction extractFields(text) {\n  const result = {};\n  \n  const regexPattern = /(?:^|\\n)(\\d+\\.\\s+\\*\\*(.+?)\\*\\*:)([\\s\\S]*?)(?=\\n\\d+\\. \\*\\*|$)/g;\n  let match;\n\n  while ((match = regexPattern.exec(text)) !== null) {\n    const rawHeading = normalize(match[2]);\n    const content = match[3].trim();\n\n    // Match the normalized heading to our field map\n    for (const [field, aliases] of Object.entries(headingMap)) {\n      if (aliases.map(normalize).includes(rawHeading)) {\n        result[field] = content;\n        break;\n      }\n    }\n  }\n\n  return result;\n}\n\nconst extracted = extractFields(text);\n\n// Throw error if required fields are missing\nif (\n  !extracted[\"Video Title\"] &&\n  !extracted[\"Video Description\"] &&\n  !extracted[\"Script Structure\"]\n) {\n  throw new Error(\"AI output missing required sections.\");\n}\n\nreturn [{ json: extracted }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        700,
        -115
      ],
      "id": "f62bb0cf-071a-4600-8f57-cda794465492",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cc120380-ecdf-4928-b4e8-2aec4ab2151c",
              "leftValue": "={{ $json.output }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -180,
        -440
      ],
      "id": "3361cb12-e62a-4d13-a98a-22de8a9db4ad",
      "name": "If1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b353734c-7a64-46de-ace7-f85e0d96e1bb",
              "leftValue": "={{ $json.data.Respond }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        260,
        -340
      ],
      "id": "3ff8051e-50fd-453b-9b86-2ce7a670dad0",
      "name": "If2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1b661297-ff4f-4ece-86ac-c3568fa8ea68",
              "leftValue": "={{ $json['Video Title'] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "5cd6ae90-8af1-42c8-a78b-d18abcd48679",
              "leftValue": "={{ $json['Video Description'] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "94941432-9b3f-46f1-ba9c-5651cf8c25c0",
              "leftValue": "={{ $json['Script Structure'] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        920,
        -115
      ],
      "id": "1648c98a-5178-41b3-a069-fa6a1f03b65a",
      "name": "If4"
    },
    {
      "parameters": {
        "errorMessage": "Failed to receive email response"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        480,
        -390
      ],
      "id": "1cbeffcb-ad30-4009-ac5b-842bac47da70",
      "name": "Stop and Error | Email response"
    },
    {
      "parameters": {
        "errorMessage": "=AI Agent failed: {{ $json.error || $json.message || 'Unknown error' }}"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        40,
        -540
      ],
      "id": "e124f1fc-1315-40e5-b114-d188f799b112",
      "name": "Stop and Error | Agent output"
    },
    {
      "parameters": {
        "errorMessage": "Failed to append row to Google Sheets"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        1140,
        -15
      ],
      "id": "331c01d7-e268-4877-a9cf-c417af35e1a8",
      "name": "Stop and Error|sheet append"
    }
  ],
  "pinData": {},
  "connections": {
    "On form submission": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error | Agent output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error | Email response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet": {
      "main": [
        []
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error|sheet append",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "5qalnVbtNv7Dk0Zj"
  },
  "versionId": "fe86b307-b290-44e1-9111-f56653092feb",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2bc92976a26aaeb709589d667c027d7b48a135a37ee03830ec5023b24e9ad6c6"
  },
  "id": "Nsil6uOchkioOKx2",
  "tags": []
}